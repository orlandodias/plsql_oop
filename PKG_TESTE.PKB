CREATE OR REPLACE PACKAGE BODY PKG_TESTE IS

PROCEDURE TST_01_ABERTURA
(m_arqR  IN OUT NOCOPY C_ARQ,
 m_arqW  IN OUT NOCOPY C_ARQ)
IS
BEGIN
   /*
    * TESTANDO A ABERTURA DE UM ARQUIVO DE LEITURA COMO GRAVAÇÃO
    * É ESPERADO QUE EMITA A EXCEÇÃO INVALID_WRITE_OPERATION
    */
   BEGIN
      m_arqR := C_ARQ_LEITURA(nmDir => K_CAMINHO,
                              nmArq => K_NOME_ARQUIVO || '_01.TXT',
                              tpArq => 'W');

      DBMS_OUTPUT.PUT_LINE('01.1: NUNCA É PARA CHEGAR NESTE PONTO');
      m_arqR.abre;
      m_arqR.fecha;
   EXCEPTION
      WHEN BIB_EXCEPTIONS.INVALID_WRITE_OPERATION THEN
         DBMS_OUTPUT.PUT_LINE('ERRO ESPERADO: ABERTURA MAL SUCEDIDA DE ARQUIVO DE LEITURA COMO ESCRITA');
   END;

   /*
    * TESTANDO A ABERTURA DE UM ARQUIVO DE ESCRITA COMO LEITURA
    * É ESPERADO QUE EMITA A EXCEÇÃO INVALID_READ_OPERATION
    */
   BEGIN
      m_arqW := C_ARQ_ESCRITA(nmDir => K_CAMINHO,
                              nmArq => K_NOME_ARQUIVO || '_02.TXT',
                              tpArq => 'R');

      DBMS_OUTPUT.PUT_LINE('01.2: NUNCA É PARA CHEGAR NESTE PONTO');
      m_arqW.abre;
      m_arqW.fecha;
   EXCEPTION
      WHEN BIB_EXCEPTIONS.INVALID_READ_OPERATION THEN
         DBMS_OUTPUT.PUT_LINE('ERRO ESPERADO: ABERTURA MAL SUCEDIDA DE ARQUIVO DE ESCRITA COMO LEITURA');
   END;
END;


PROCEDURE TST_02_LEITURA_EM_ESCRITA
(m_arqW  IN OUT NOCOPY C_ARQ)
IS
 V_I     INTEGER := 0;
BEGIN
   /*
    * TESTANDO OPERACOES DE LEITURA EM ARQUIVO DE ESCRITA
    * É ESPERADA A EXCEÇÃO INVALID_READ_OPERATION NO MOMENTO DA LEITURA
    */
   m_arqW := C_ARQ_ESCRITA(nmDir => K_CAMINHO,
                           nmArq => K_NOME_ARQUIVO || '_02.TXT',
                           tpArq => 'W');

   m_arqW.abre;

   FOR V_I IN 1..100 LOOP
      m_arqW.grava('LINHA: ' || TRIM(TO_CHAR(V_I)));
   END LOOP;

   BEGIN
      m_arqW.le;
      DBMS_OUTPUT.PUT_LINE('02.1: NUNCA É PARA CHEGAR NESTE PONTO');
   EXCEPTION
      WHEN BIB_EXCEPTIONS.INVALID_READ_OPERATION THEN
         DBMS_OUTPUT.PUT_LINE('ERRO ESPERADO: TENTATIVA DE LEITURA EM ARQUIVO ESCRITA');
   END;

   m_arqW.abre;
   m_arqW.fecha;
END;


PROCEDURE TST_03_ESCRITA_EM_LEITURA
(m_arqR  IN OUT NOCOPY C_ARQ)
IS
 V_I     INTEGER := 0;
BEGIN
   /*
    * TESTANDO OPERACOES DE ESCRITA EM ARQUIVO DE LEITURA
    * É ESPERADA A EXCEÇÃO INVALID_READ_OPERATION NO MOMENTO DA GRAVACAO
    */
   m_arqR := C_ARQ_LEITURA(nmDir => K_CAMINHO,
                           nmArq => K_NOME_ARQUIVO || '_02.TXT',
                           tpArq => 'R');

   m_arqR.abre;

   LOOP
      BEGIN
         m_arqR.le;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            EXIT;
      END;
   END LOOP;
   DBMS_OUTPUT.PUT_LINE('LINHAS LIDAS: ' || TO_CHAR(m_arqR.nuLin));

   BEGIN
      m_arqR.grava('LINHA: ' || TRIM(TO_CHAR(V_I)));
   EXCEPTION
      WHEN BIB_EXCEPTIONS.INVALID_WRITE_OPERATION THEN
         DBMS_OUTPUT.PUT_LINE('ERRO ESPERADO: TENTATIVA DE ESCRITA EM ARQUIVO LEITURA');
   END;

   m_arqR.abre;
   m_arqR.fecha;
END;


PROCEDURE MAIN
(e_teste IN INTEGER)
IS
 O_ARQR C_ARQ_LEITURA;
 O_ARQW C_ARQ_ESCRITA;
BEGIN
   IF e_teste = TESTE_01_ABERTURA THEN
      TST_01_ABERTURA(m_arqR => O_ARQR,
                      m_arqW => O_ARQW);
   ELSIF e_teste = TESTE_02_LEITURA_EM_ESCRITA THEN
      TST_02_LEITURA_EM_ESCRITA(m_arqW => O_ARQW);
   ELSIF e_teste = TESTE_02_LEITURA_EM_ESCRITA THEN
      TST_03_ESCRITA_EM_LEITURA(m_arqR => O_ARQW);
   END IF;
END;

PROCEDURE DO_NOTHING
(e_id IN INTEGER)
IS
BEGIN
    DBMS_OUTPUT.put_line(e_id);
END;

END PKG_TESTE;
/
